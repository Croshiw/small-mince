"
Code inspired from: ClyJumpToTestClassCommand and ClyJumpToTestMethodCommand
"
Class {
	#name : #TGTestClassBuilder,
	#superclass : #Object,
	#traits : 'TGInternalClassesTrait',
	#classTraits : 'TGInternalClassesTrait classTrait',
	#instVars : [
		'theClass',
		'theMethods',
		'resultClass'
	],
	#category : #'SmalltalkTestGrinder-4.Synthesis'
}

{ #category : #adding }
TGTestClassBuilder >> addCommentForClass [
	resultClass comment: 'This Class is generated by TestGrinder, from ',theClass
]

{ #category : #'as yet unclassified' }
TGTestClassBuilder >> buildClass [
	| className |
	className := self testClassName.
	resultClass := TestCase
		subclass: className
		instanceVariableNames: ''
		classVariableNames: ''
		package: self defaultTempPackage.
	self addCommentForClass
]

{ #category : #'as yet unclassified' }
TGTestClassBuilder >> buildFor: aClass methods: listMethods [
	theClass := aClass.
	theMethods := listMethods.
	
	self removeIfExists.
	self buildClass.
	self installMethods
]

{ #category : #'as yet unclassified' }
TGTestClassBuilder >> defaultTempPackage [
	^ 'SmalltalkTestGrinderTempClasses'
]

{ #category : #'as yet unclassified' }
TGTestClassBuilder >> installMethods [
	theMethods do: [ :m | resultClass  compile: m formattedCode  classified: 'test' ]
	
]

{ #category : #'as yet unclassified' }
TGTestClassBuilder >> removeIfExists [
	(self defaultTempPackage asPackageIfAbsent: [ ^ true ]) classes
		select: [ :item | item name = self testClassName ]
		thenDo: [ :item | item removeFromSystem ]
]

{ #category : #'as yet unclassified' }
TGTestClassBuilder >> testClassName [
	^ (theClass , 'GenTest') asSymbol
]
